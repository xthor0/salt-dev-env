#!/bin/bash

# meant to be run via systemd on a vbox minion
# an easier way to deploy since salt-cloud doesn't work
status_file=/root/.minion-setup-complete

function comment() {
# I have seen a few instances where this error popped up:

# VBoxControl: error: Could not contact the host system.  Make sure that you are running this
# VBoxControl: error: application inside a VirtualBox guest system, and that you have sufficient
# VBoxControl: error: user permissions.

# It looks like the script is running just a few seconds before the kernel module is loaded.
# This loop should fix that.

retval=1
attempt=0
maxattempts=10
while [ ${retval} -eq 1 ]; do 
  dmesg | grep -q 'vboxguest: Successfully loaded'
  if [ $? -eq 0 ]; then
    echo "vboxguest kernel module loaded, proceeding..."
    break
  else
    let attempt+=1
    if [ ${attempt} -ge ${maxattempts} ]; then
      echo "ERROR: vboxguest kernel module is not loaded - waited 10 seconds. Exiting."
      exit 255
    else
      echo "vboxguest kernel module has not loaded, sleeping..."
      sleep 1
    fi
  fi
done
}

# check the status file - if we're in a DONE status, let's send a notification
# and disable the service from ever starting again.
if [ -f ${status_file} ]; then
  grep -q done ${status_file}
  if [ $? -eq 0 ]; then
    echo "Minion setup complete - notifying pushover"
    echo completed > ${status_file}

    # make sure the services don't start at boot again
    if [ -f /etc/systemd/system/minion-setup.service ]; then
      systemctl disable minion-setup
    fi

    if [ -f /etc/init/minion-setup.conf ]; then
      echo manual | sudo tee /etc/init/minion-setup.override
    fi

    # pushover notification that we're done
    curl -s \
      --form-string "token=ajuzqvz9huyfdt72iuj2itkcn7d13p" \
      --form-string "user=uiLUuynXsvF7UCQATr3j6j7pG7dGoh" \
      --form-string "message=Notification: ${HOSTNAME} VM build has completed" \
    https://api.pushover.net/1/messages.json
    exit 0
  else
    echo "Minion has already been set up."
    exit 0
  fi
fi

# get the new hostname
newHostName=$(VBoxControl --nologo guestproperty get GuestName | awk '{ print $2 }')

# make sure the result isn't zero length (indicating VBoxControl doesn't work), or "value" (not set)
if [ ${#newHostName} -eq 0 ]; then
  echo "vbox guest property not set - exiting."
  exit 255
elif [ "${newHostName}" == "value" ]; then
  echo "vbox guest property not set - exiting."
  exit 255
fi

# set the hostname
hostnamectl set-hostname ${newHostName}.lab

# only do this if Salt is installed
if [ -d /etc/salt ]; then
  # statically set the hostname in Salt
  echo ${newHostName}.lab > /etc/salt/minion_id

  # point the minion at the right master
  echo "master: 10.187.88.10" | tee /etc/salt/minion
  
  # start Salt minion next boot
  systemctl enable salt-minion
fi

# regenerate UUID, otherwise Ubuntu acts totally stupid
if [ -f /etc/machine-id ]; then
  # required for ubuntu 18.04
  rm -f /etc/machine-id && dbus-uuidgen --ensure=/etc/machine-id
fi

# resize the hard drive
freespace=$(sfdisk -Fq /dev/sda | wc -l)
re='^[0-9]+$'
if ! [[ ${freespace} =~ ${re} ]] ; then
   echo "Error - unable to determine status of free space - exiting."
   exit 255
fi

if [ ${freespace} -eq 0 ]; then
  # disk is fully utilized - expand the partition
  resize2fs /dev/sda1
else
  echo ", +" | sfdisk --no-reread -N 1 /dev/sda
  reboot
fi

# don't run this next boot!
echo done > ${status_file}

# reboot!
reboot

# fin
exit 0
